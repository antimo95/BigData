# -*- coding: utf-8 -*-
"""HW3_MongoDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r7Ef_8m9s6Sbh62DrjDax0VRr8Q02BQB

#Caricamento Dataset
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/videogames.csv')
df

"""#Rimozione righe con valori nulli"""

# Rimuovi le righe con valori nulli
df_cleaned = df.dropna()
# Mostra le prime righe del DataFrame pulito
df_cleaned

"""#Collegamento a MongoDB Atlas"""

!pip install -U pymongo

def get_mongo_client(mongo_uri):
  """Establish connection to the MongoDB."""
  try:
    client = pymongo.MongoClient(mongo_uri)
    print("Connection to MongoDB successful")
    return client
  except pymongo.errors.ConnectionFailure as e:
    print(f"Connection failed: {e}")
    return None

import pandas as pd
import pymongo
from pymongo import MongoClient



mongo_uri = "mongodb+srv://antimo:esame123@bigdata.nuu2w.mongodb.net/?retryWrites=true&w=majority&appName=BigData"

mongo_client = get_mongo_client(mongo_uri)

# Ingest data into MongoDB
db = mongo_client['HW3']
collection = db['Games']

# Delete any existing records in the collection
collection.delete_many({})

#Inserimento del dataframe in mongoDB come dizionario
documents = df_cleaned.to_dict('records')
collection.insert_many(documents)

# Esegui una query per ottenere tutti i documenti dalla collezione
cursor = collection.find({})

# Converti i risultati della query in una lista di dizionari
data_list = list(cursor)

# Chiudi il cursore
cursor.close()

# Converti la lista di dizionari in un DataFrame
df = pd.DataFrame(data_list)

#Stampa dataset
df

"""#QUERY"""

pipeline = [
    {"$group": {"_id": "$Game Title", "game_count": {"$sum": 1}}},
    {"$sort": {"game_count": -1}}
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandaas
df = pd.DataFrame(list(result))
# Rinomina il campo _id
df = df.rename(columns={'_id': 'game_name'})
# Stampa il DataFrame in formato tabellare
df.head(10)

pipeline = [
    {"$group": {"_id": "$Genre", "Media_Globale": {"$avg": "$Global"}}},
    {"$sort": {"Media_Globale": -1}}
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandaas
df = pd.DataFrame(list(result))

# Rinomina il campo _id
df = df.rename(columns={'_id': 'Genre'})

# Stampa il DataFrame in formato tabellare
df.head(10)

pipeline = [
    {
        "$match": {
            "Genre": {"$in": ["Platform", "Role-Playing", "Misc"]}
        }
    },
    {
        "$group": {
            "_id": {"Publisher": "$Publisher", "Genre": "$Genre"},
            "game_count": {"$sum": 1}
        }
    },
    {
        "$sort": {
            "game_count": -1
        }
    }
]
result = collection.aggregate(pipeline)

for i in result:
  print(i)

pipeline = [
    {
        "$match": {
            "Publisher": "Nintendo",
            "Genre": "Platform"
        }
    },
    {
        "$group": {
            "_id": "$Publisher",
            "Vendite_Medie_Gobali": {"$avg": "$Global"}
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Rinomina il campo _id
df = df.rename(columns={'_id': 'Publisher'})

# Mostra il DataFrame in formato tabellare
print(df)

pipeline = [
    {
        "$match": {
            "Publisher": "Nintendo"
        }
    },
    {
        "$group": {
            "_id": "$Year",
            "AVG_Annuale": {"$avg": "$Global"}
        }
    },
    {
        "$sort": {
            "AVG_Annuale": -1
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Rinomina il campo _id
df = df.rename(columns={'_id': 'Year'})

# Mostra il DataFrame in formato tabellare
print(df)

# Esegui l'aggregazione con ordinamento
pipeline = [
    {
        "$match": {
            "Review": {"$gt": 8},
            "Global": {"$gt": 20}
        }
    },
    #Voglio visualizzare solo alcuni attributi
    {
        "$project": {
            "Game Title": 1,
            "Review": 1,
            "Global": 1,
            "_id" : 0 #Escludo l'id per avere un risultato più pulito
        }
    },
    {
        "$sort": {
            "Global": -1  # Ordina in base a "Global" in ordine decrescente
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Mostra il DataFrame in formato tabellare
df.head(10)

# Esegui l'aggregazione con ordinamento
pipeline = [
    {
        "$match": {
            "Review": {"$gt": 8},
            "Global": {"$gt": 20}
        }
    },
    #Voglio visualizzare solo alcuni attributi
    {
        "$project": {
            "Game Title": 1,
            "Review": 1,
            "Global": 1,
            "Year" : 1, #Aggiungo Year
            "_id" : 0 #Escludo l'id per avere un risultato più pulito
        }
    },
    {
        "$sort": {
            "Global": -1  # Ordina in base a "Global" in ordine decrescente
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Mostra il DataFrame in formato tabellare
df.head(10)

pipeline = [
    {
        "$match": {
            "Publisher": "Nintendo",
            "Year": 2006
        }
    },
    {
        "$project": {
            "Game Title": 1,
            "Global": 1,
            "_id": 0  # Escludi il campo _id
        }
    },
    {
        "$sort": {
            "Global": -1  # Ordina in base a "Global" in ordine decrescente
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Mostra il DataFrame in formato tabellare
print(df)

pipeline = [
    {
        "$group": {
            "_id": {"Platform": "$Platform", "Year": "$Year"},
            "game_count": {"$sum": 1}
        }
    },
    {
        "$sort": {
            "game_count": -1
        }
    }
]

result = collection.aggregate(pipeline)

counter = 0

for i in result:
    if counter < 20:
        print(i)
        counter += 1
    else:
        break

pipeline = [
    {
        "$group": {
            "_id": "$Publisher",
            "Vendite_NA": {"$sum": "$North America"},
            "Vendite_EU": {"$sum": "$Europe"},
            "Vendite_JP": {"$sum": "$Japan"},
            "Vendite_RW": {"$sum": "$Rest of World"},
            "Vendite_Globali": {"$sum": "$Global"}
        }
    },
    {
        "$sort": {
            "Vendite_Globali": -1
        }
    }
]

result = collection.aggregate(pipeline)

# Converti i risultati in un DataFrame pandas
df = pd.DataFrame(list(result))

# Rinomina il campo _id
df = df.rename(columns={'_id': 'Publisher'})

# Mostra il DataFrame in formato tabellare
df.head(10)